// auto generated by https://github.com/sakura-rip/mongodb-gen
// Version : [[version]]
// DO NOT EDIT

package dao

import (
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo/options"
)

func (cl *[[.Name]]DaoClient) DeleteOne(id [[.IdFieldType]]) (int64, error) {
    result, err := cl.Col.DeleteOne(cl.ctx, bson.M{"_id": id})
    if err != nil {
        return 0, err
    }
    return result.DeletedCount, err
}

func (cl *[[.Name]]DaoClient) DeleteMany(attr bson.M) (int64, error) {
    result, err := cl.Col.DeleteMany(cl.ctx, attr)
    if err != nil {
        return 0, err
    }
    return result.DeletedCount, err
}

func (cl *[[.Name]]DaoClient) InsertOne([[.LowerName]] *[[.PackageName]].[[.Name]]) (string, error) {
    result, err := cl.Col.InsertOne(cl.ctx, [[.LowerName]])
    if err != nil {
        return "", err
    }
	if oid, ok := result.InsertedID.(string); ok {
		return oid, nil
	}
	return "", nil
}

func (cl *[[.Name]]DaoClient) InsertMany(objs []interface{}) ([]string, error) {
    result, err := cl.Col.InsertMany(cl.ctx, objs)
    if err != nil {
        return nil, err
    }
    var strIds []string
	for _, id := range result.InsertedIDs {
		strIds = append(strIds, id.(string))
		return strIds, nil
	}
    return strIds, nil
}

func (cl *[[.Name]]DaoClient) UpdateAttribute(id [[.IdFieldType]], attrToUpdate bson.M) error {
    _, err := cl.Col.UpdateOne(cl.ctx, bson.M{"_id": id}, Set(attrToUpdate))
    return err
}

func (cl *[[.Name]]DaoClient) DeleteAttributes(id [[.IdFieldType]], attrToDelete bson.M) error {
	_, err := cl.Col.UpdateOne(cl.ctx, bson.M{"_id": id}, Unset(attrToDelete))
	return err
}

func (cl *[[.Name]]DaoClient) AddToArray(id [[.IdFieldType]], object bson.M) error {
    _, err := cl.Col.UpdateOne(cl.ctx, bson.M{"_id": id}, AddToSet(object))
    return err
}

func (cl *[[.Name]]DaoClient) RemoveFromArray(id [[.IdFieldType]], object bson.M) error {
    _, err := cl.Col.UpdateOne(cl.ctx, bson.M{"_id": id}, Pull(object))
    return err
}

func (cl *[[.Name]]DaoClient) Get(filter bson.M) ([][[.PackageName]].[[.Name]], error) {
	res, err := cl.Col.Find(
		cl.ctx, filter)
	if err != nil {
		return nil, err
	}
	var [[.LowerName]]s [][[.PackageName]].[[.Name]]
	if err := res.All(cl.ctx, &[[.LowerName]]s); err != nil {
		return nil, err
	}
	return [[.LowerName]]s, err
}

func (cl *[[.Name]]DaoClient) Get[[.Name]](id [[.IdFieldType]]) ([[.PackageName]].[[.Name]], error) {
	res := cl.Col.FindOne(
		cl.ctx,
		bson.D{{"_id", id}},
	)
	var [[.LowerName]] [[.PackageName]].[[.Name]]
	if err := res.Decode(&[[.LowerName]]); err != nil {
        return [[.LowerName]], err
	}

	return [[.LowerName]], nil
}

func (cl *[[.Name]]DaoClient) GetAll() ([][[.PackageName]].[[.Name]], error) {
	return cl.Get(bson.M{})
}

func (cl *[[.Name]]DaoClient) GetAttribute(id [[.IdFieldType]], attributes bson.D) ([[.PackageName]].[[.Name]], error) {
	res := cl.Col.FindOne(
		cl.ctx,
		bson.D{{"_id", id}},
		options.FindOne().SetProjection(attributes),
	)
	var [[.LowerName]] [[.PackageName]].[[.Name]]
	if err := res.Decode(&[[.LowerName]]); err != nil {
		return [[.LowerName]], err
	}
	return [[.LowerName]], nil
}

func (cl *[[.Name]]DaoClient) GetAttributes(id [[.IdFieldType]], attributes ...string) ([[.PackageName]].[[.Name]], error) {
	var projections = bson.D{}
	for _, attribute := range attributes {
		projections = append(projections, bson.E{Key: attribute, Value: 1})
	}
	return cl.GetAttribute(id, projections)
}
