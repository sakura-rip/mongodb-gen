// auto generated by github.com/sakura-rip tool
// Version : [[version]]
// DO NOT EDIT

package [[.PackageName]]

import (
    "go.mongodb.org/mongo-driver/bson/primitive"
    "go.mongodb.org/mongo-driver/bson"
    "go.mongodb.org/mongo-driver/mongo/options"
)

func (cl *DBClient) Insert[[.Name]]One([[.LowerName]] *[[.Name]]) (string, error) {
    result, err := cl.[[.Name]]Col.InsertOne(cl.ctx, [[.LowerName]])
    if err != nil {
        return "", err
    }
    if oid, ok := result.InsertedID.(primitive.ObjectID); ok {
        return oid.Hex(), nil
    }
    return "", nil
}

func (cl *DBClient) Insert[[.Name]]Many([[.LowerName]] []*[[.Name]]) ([]string, error) {
    result, err := cl.[[.Name]]Col.InsertMany(cl.ctx, [[.LowerName]])
    if err != nil {
        return nil, err
    }
    var strIds []string
    if ids, ok := result.InsertedIDs.([]primitive.ObjectID); ok {
        for _, oid := range ids {
            strIds = append(strIds, oid.Hex())
        }
        return strIds, nil
    }
    return strIds, nil
}

func (cl *DBClient) Update[[.Name]]Attribute(id string, attrToUpdate bson.D) error {
    _, err := cl.[[.Name]]Col.UpdateOne(cl.ctx, bson.M{"_id": id}, bson.M{"$set": attrToUpdate})
    return err
}

func (cl *DBClient) Delete[[.Name]]Attribute(id string, attrToDelete bson.D) error {
    _, err := cl.[[.Name]]Col.UpdateOne(cl.ctx, bson.M{"_id": id), bson.M{"$unset": attrToDelete)
    return err
}

func (cl *DBClient) AddTo[[.Name]]Array(id string, object bson.M) error {
    _, err := cl.[[.Name]]Col.UpdateOne(cl.Ctx, bson.M{"_id": id}, bson.M{"$addToSet": object})
    return err
}

func (cl *DBClient) RemoveFrom[[.Name]]Array(id string, object bson.M) error {
    _, err := cl.[[.Name]]Col.UpdateOne(cl.Ctx, bson.M{"_id": id}, bson.M{"$pull": targets})
    return err
}

func (cl *DBClient) Fetch[[.Name]](id string) ([[.Name]], error) {
	res := cl.[[.Name]]Col.FindOne(
		cl.ctx,
		bson.D{{"_id", id}},
	)
	var [[.LowerName]] *[[.Name]]
	if err := res.Decode(&[[.LowerName]]); err != nil {
		return [[.LowerName]], err
	}
	return [[.LowerName]], nil
}

func (cl *DBClient) FetchAll[[.Name]]() ([][[.Name]], error) {
    res, _ := cl.[[.Name]]Col.Find(cl.ctx, bson.M{})
    var [[.LowerName]]s [][[.Name]]
    if err := res.All(cl.ctx, &[[.LowerName]]s); err != nil {
        return [[.LowerName]]s, err
    }
    return [[.LowerName]]s, nil
}

func (cl *DBClient) Fetch[[.Name]]Attribute(id string, attributes bson.D) (*[[.Name]], error) {
	res := cl.[[.Name]]Col.FindOne(
		cl.ctx,
		bson.D{{"_id", id}},
		options.FindOne().SetProjection(attributes),
	)
	var [[.LowerName]] *[[.Name]]
	if err := res.Decode(&[[.LowerName]]); err != nil {
		return [[.LowerName]], err
	}
	return [[.LowerName]]. nil
}

func (cl *DBClient) Fetch[[.Name]]Attributes(id string, attributes ...string) (*[[.Name]], error) {
	var projections = bson.D{}
	for _, attribute := range attributes {
		projections = append(projections, bson.E{Key: attribute, Value: 1})
	}
	return cl.Fetch[[.Name]]Attribute(id, projections)
}
